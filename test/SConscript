import atexit
import subprocess
import os
from os.path import basename

Import("env platform party_classes common_sources")
arch_short = '64' if (env['bits'] == '64') else '86'

# Add path to scons
env.Append(CPPPATH=['./deps/Catch2/single_include/catch2'])

test_sources = Glob("""*.cpp""") + Split("""
	#build/obj/scenedit/scen.fileio.cpp
""")

debug_symbols = None
if str(platform) == "win32" and 'msvc' in env["TOOLS"]:
	link_flags = f'/nologo /SUBSYSTEM:CONSOLE /MACHINE:X{arch_short}'
	if env['debug']:
		link_flags += ' /DEBUG'
	test = env.Program("#build/bin/boe_test", party_classes + common_sources + test_sources, LINKFLAGS=link_flags)
	if env['debug']:
		debug_symbols = test[0].abspath.replace(".exe", ".pdb")
else:
	test = env.Program("#build/bin/boe_test", test_sources + party_classes + common_sources)

def run_tests(env,target,source):
	cwd = os.getcwd()
	def run_subprocess():
		app = str(source[0].abspath)
		# The target absolute path is in build/bin, but the dynamic libs are installed
		# in build/test (the current directory when run_tests() is called)
		app = basename(app)
		# On Windows, subprocess exe paths are not relative to the cwd argument:
		if str(platform) == "win32":
			app = f'build/test/{app}'
		else:
			app = f'./{app}'
		exit_code = subprocess.call(app, cwd=cwd)
		if exit_code == 0:
			open(target[0].abspath,'w').write("PASSED\n")
		else:
			print(f'Unit test failure! Exit code: {exit_code}')
			# basic exit() won't change the exit code in an atexit callback.
			# os._exit() will, but it can't handle large Windows error codes
			# which boe_test *can* throw.
			os._exit(1)
	# The tests subprocess has to happen AFTER all DLLs have been installed in the CI
	atexit.register(run_subprocess)

env.Install("#build/test/", test)
if debug_symbols is not None:
	env.Install("#build/test/", debug_symbols)
env.AlwaysBuild(env.Install("#build/test/", Dir("#test/files")))
env.AlwaysBuild(env.Install("#build/rsrc/", Dir("#rsrc/strings")))
# The dialog construction test case requires these:
env.AlwaysBuild(env.Install("#build/rsrc/", Dir("#rsrc/dialogs")))
env.AlwaysBuild(env.Install("#build/rsrc/", Dir("#rsrc/fonts")))
env.AlwaysBuild(env.Install("#build/rsrc/", Dir("#rsrc/graphics")))

env.Command("#build/test/junk/", '', 'mkdir "' + Dir("#build/test/junk").path + '"')
env.Command("#build/test/passed", test, run_tests, chdir=True)
